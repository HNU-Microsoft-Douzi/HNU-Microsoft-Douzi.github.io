---
layout: post
title: "Python做题错误记录"
subtitle: "Record my python mistake!"
data: 2018-04-12
author: "Zxy"
tags:
    - python
---

**关于Python中单下划线_foo与双下划线__foo与__foo__的成员**

_xxx 不能用’from module import *’导入  （相当于protected） 

__xxx__ 系统定义名字   (系统内置的，比如关键字)

__xxx 类中的私有变量名  （privated），所以更加不能使用from module import进行导入了

**关于__new__和__init__的区别**

- __init__是当实例对象创建完成后被调用的，然后设置对象属性的一些初始值。

- __new__是在实例创建之前被调用的，因为它的任务就是创建实例然后返回该实例，是个静态方法。

即，__new__在__init__之前被调用，__new__的返回值（实例）将传递给__init__方法的第一个参数，然后__init__给这个实例设置一些参数。

**关于range和xrange的用法差别**

range和xrange的作用都是一样，区间是左闭右开（*貌似大部分的区间设定都是这样*），但是它们的返回值类型不一样，range会返回一个数组，而xrange会返回一个生成器。

**python浮点数的误差**

*题目：*

如何解释下面的执行结果？

`print 1.2 - 1.0 == 0.2`

`Flase`

原因:python中的浮点数运算存在误差，下面是实践结果:

` 1.2 - 1.0`

`0.1999999996`

**Python中的复述**

- 表示复数的语法是`real + image j`

- 实部和虚部都是浮点数

- 虚部的后缀是j/J

- 方法`conjugate`返回负数的共轭负数

**0^0 == 1?**

下列代码的执行结果是？

`[i**i for i in xrange(3)]`


`[1,1,4]`

原因如上: **0^0 == 1！！！**

**解释性语言和编译性语言的定义：**

计算机不能直接理解高级语言，只能直接理解机器语言，所以必须要把高级语言翻译成机器语言，计算机才能执行高级语言编写的程序。

翻译的方式有两种，一个是编译，一个是解释。两种方式只是翻译的时间不同。

*解释性语言的定义：*

解释性语言的程序不需要编译，在运行程序的时候才翻译，每个语句都是执行的时候才翻译。这样解释性语言每执行一次就需要逐行翻译一次，效率比较低。

现代解释性语言通常把源程序编译成中间代码，然后用解释器把中间代码一条条翻译成目标机器代码，一条条执行。

*编译性语言的定义：*
编译性语言写的程序在被执行之前，需要一个专门的编译过程，把程序编译成为机器语言的文件，比如exe文件，以后要运行的话就不用重新翻译了，直接使用编译的结果就行了（exe文件），因为翻译只做了一次，运行时不需要翻译，所以编译型语言的程序执行效率高