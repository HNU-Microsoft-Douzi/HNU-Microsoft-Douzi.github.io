---
title: "众方实践之问题解决（二）"
subtitle: "Solution of Question for ZhongFang technology"
layout: post
data: 2019-04-27
author: "Zxy"
tags:
    - java
---

自从上次面试过去很长的时间，帮众方公司做项目的过程很忙碌，这一个月没有怎么进行过博客的更新，但实际上这一个月我攒下的，或者说应该表述出来的东西比我之前3个月写的都要多。

但我一直没有真正的落笔，一方面是因为时间上实在太紧了，再一个，我还是希望这个项目完整做完的时候，再整个的做一次整理，因为我有记录开发流程和解决方案的习惯，所以我并不会对过程中遇到的问题和解决策略有所遗忘。

我一直都在强调自己想成为的并不是依赖于已有职业和专精技能，很简单，就是能够解决问题的人。

那就先看这次记录的问题。

## 一、问题描述

在做硬件设备的互联时，我们使用自定义的同步指令池来实现所有指令的运行，这本来是官方建议的写法，但是我们都知道实际开发最强调的实际上是一个软件的强壮和稳定性，而不是单考虑功能，所以如何保证稳定性成为了我这一个月中疲惫中感悟最多的东西。

我先说说这个同步指令池，我们用一个单独的Runnable构建一个worker用来作为处理指令的容器，经过处理后构造成一个单独的指令执行池，有指令的时候，我们就将所有的Runnable在一个while(true)的循环中迭代执行。

我们先来看看这个worker:
{% highlighe java %}
    private Runnable runnable = new Runnable() {
        @Override
        public void run() {
            ArrayList<Runnable> jobs = new ArrayList<>();

            while (true) {
                synchronized (jobQueue) {
                    jobs.addAll(jobQueue);
                    jobQueue.clear();
                }

                if (jobs.isEmpty()) {
                    break;
                }

                for (Runnable job: jobs) {
                    job.run();
                }
                jobs.clear();
            }

            synchronized (StateLock) {
                state = IDLE;
            }
        }
    };
{% endhighlight %}

听起来没有任何问题，对吧？

但是实际上，因为我们与下位机相连，所以遇到了有些时候，我们传递的指令并不执行！！！

但是我们的指令并不是一定不执行，而是大部分情况下是可以正常执行的。

这个时候你告诉我你怎么测？

## 二、 发现问题

总过有十几条相关指令，它们运行的频率非常频繁，以毫秒即时，所以你肯定没法用调试去看任务执行的过程。

那怎么办？

我将十几条相关指令全部分解，一次性执行大量的相关指令进行测试，试图模拟出机器卡死的流程来找到原因，遗憾的是没有任何指令单独执行会造成卡死现象，甚至我组建了几种指令组合，结果依旧。

第一种解决策略失败。

试试第二种。

我尝试将问题分解，既然从第一部已经排除了指令执行会产生的问题，那么我便顺着源头一路找下去，分析到底是哪一个步骤可能会出现问题，我通过打印确保在将所有的指令加入到指令池的过程是没有问题的，因此我确定了问题可能出现的位置。

我知道距离结果不远了，问题大概率是出现在这个指令池的执行过程中，那我们如何确定整个指令池的问题到底是出现在了哪里呢？

想了一下，很好，我们打印一下当前正在执行的Runnable名称，看看我们执行指令的过程中，是不是哪个指令没有执行？（这样做的原因是因为我们之前已经确定指令的执行本身是没有问题的）

ok，我们来尝试模拟出卡死的情况。

很幸运，我们在执行的过程中通过特征操作成功遇到了卡死的现象，我重点观察了此时打印的数据，发现在worker的某个运行的Runnable后没有看到我们想要执行的指令名。

好了，问题已经解决了！！！

为什么这样说？

我们知道在这个worker线程中，所有的指令执行都是通过while(true)一次取出来当前线程池中的所有指令一次执行的。

那么这样做会有什么问题呢？

想一下，如果我在while(true)的第一个循环中某个Runnable被卡住了，那么我while(true)还会继续执行么？

答案是不会，就一句话，因为worker内部的执行顺序是同步的。

终其原因，在某种特定的环境下，core（芯片核心）执行对应某些指令的速度会受到影响，甚至可能会卡顿，一旦某个指令卡顿，后面的指令就无法得到执行，到了这里，问题的确认已经精确到了点上。


## 三、问题解决

当我们定位到问题的时候，解决问题就变得容易很多了，既然知道指令下发无法达成的原因，那么就去让整个worker的运行不再造成阻塞。

发现是指令池有漏洞，那么我们就来更改指令池。

再细化一点，既然是指令池同步不行，那怎么办？改成异步不就好了，但是我们又不能将所有的指令都变成异步执行，因为core执行运动指令的时候，并行会产生冲突。

答案出来了，我们需要一个额外的东西，一个额外的并行指令执行池，根据指令的特点，让不冲突的指令移交到并行指令池执行而减小worker的压力，尽量让我们的运动指令得以执行。

并发池的代码我就不放了，很简单。


**我觉得重点是流向分析到解决问题的整个流程，我一直在强调要做一个能够独立解决问题的人，那么我会将重点，放在我是如何解决这些问题的，项目结束之后，我会对自己遇到的问题和解决方案做一个整理，并重新整理成博文，希望可以帮助自己称为自己想要成为的人。**