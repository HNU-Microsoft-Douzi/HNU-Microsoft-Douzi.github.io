---
title: "众方实践之问题解决（一）"
subtitle: "Solution of Question for ZhongFang technology"
layout: post
data: 2019-03-27
author: "Zxy"
tags:
    - java
---

> 版权声明：转载请注明博客地址和作者名称

## 前言

差不多上个周的这个时候，有幸和两位Boss相约，进行了合作，幸运的是，这也是我第一次接触商业项目的开发，开始的过程很艰难，但也很奇妙，我学到了很多，坚持了很多，也变强了很多。

最重要的是，我知道自己有了负责整个商业项目的能力！

## 遇到的问题

**项目接手第一周遇到的问题：**

- 坐标映射问题
- 指令不响应问题
- 新建Activity阻断指令层致使机器卡死问题
- 构建MoveToList指令
- MoveToList指令运行时，与同步指令池产生的冲突问题

**解决措施：**

整个控制系统一开始是一个演示版，演示版相对于正式版的最大特点就在于它对于机器人检测到的地图必须是实时进行绘制的，这样实际上就会出现一些问题，因为机器人扫描的是对应的实际存在的物理地图，但它并不是依据经纬度来进行定位的。

所以当我们在视图上设定对应视图坐标的时候，我们必须通过一定的手段将视图坐标转换为物理坐标，同样的，我们得到机器上传上来的物理坐标的时候，我们也必须将它转换为视图坐标来进行显示。

有直接计算的公式吗？

也许有，但是我没有算出来，数据全在下层，上面两三层，传递起来非常繁琐。。。

实际解决的措施：将视图坐标->逻辑坐标->物理坐标（视图坐标到物理坐标的转换）

视图坐标->逻辑坐标->物理坐标->视图坐标（为了满足点随地图的旋转缩放而进行相应的变换）

物理坐标->逻辑坐标->视图坐标（物理坐标到视图坐标的转换）



**项目接手第二周遇到的问题：**

- 项目需要逆转双端逻辑，上一任将客户端的逻辑写在了主控手机上，将服务端的代码写在了Android板上，这样一来，实际上将实际需求的业务逻辑搞反了，因为boss要求是以云端控制所有的下位机来执行指令的下达，希望大部分的逻辑全部都出现在云端上，逆转的过程中，就是连接建立的问题。  

**解决措施：**

仔细研究了原来建立连接的代码，发现是基于UDP的，上层做了三到四层的封装，导致连接的建立又复杂又不容易排错，试着直接用原本的连接代码逆转双端并不能有效的监听到消息，于是自己撅弃所有的连接代码，自己从底层构建完整的UDP连接，考虑到指令网络传输的特性，采用UDP是相对TCP代价更小也更好的选择。

并且我大幅度优化了代码的层级，抽离了原有UDP的主要层级构成新的连接的底层，但是把中间的两层执行消息发送和消息接收的层级全部抽离了，这很大程度上减少了代码层级的复杂度，也提高了效率。

整个连接过程中需要注意的一点就是，两个客户端的连接过程是双工连接的，就是说，不单单是客户端可以向服务端发送消息，服务端也可以向客户端发送消息。

整个问题的解决时间用了接近4天，不过主要还是因为有很多课，不然时间大概还会缩短很多。

四天的时间对于网络编程的概念理解了很多，恰巧这学期才开的网络课，对socket和UDP编程都有了一定的实战经验。