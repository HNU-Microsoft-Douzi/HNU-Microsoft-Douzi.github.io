---
layout: post
title: "mysql中的事务理解"
subtitle: "Transaction understanding in mysql"
data: 2018-11-11
author: "Zxy"
tags:
    - mysql
---

> 版权声明：本文出自张晓翼的博客，转载必须注明出处。

## 什么是事务？

事务是一系列不可分割的操作，假设操作有ABCD四个步骤组成，若ABCD四个步骤全部完成，则认为事务成功，否则认为事务失败。

而事务只对DML语句(即数据操纵语言，意为增删改的操作)生效，而对DQL语句（即数据查询语句，意为用于查询的语句）无效。

## 事务的ACID

- 原子性(Atomicity)

原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，相当于是把一致性，隔离性和持久性囊括了起来看作是一个整体，把一个整体当作不可再分的原子，最终的路只有两条，全胜或全败。

- 一致性(Consistency)

一致性是指事务必须是数据库从一个一致性状态转变到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处在一致性状态。

- 隔离性(Isolation)

隔离性是指当有多个用户并发的访问数据库的时候，比如操作同一张表的时候，数据库为每一个用户开启的事务，不能被其它事务的操作所干扰，多个并发事务之间要相互隔离。

为了做到事务的隔离性，MySQL提供了四种不同的隔离级别来解决可能因为隔离性而出现的问题。

- 持久性(Durability)

持久性是指一个事务一旦被提交了，那么对数据库中的数据改变就是持久性的，即便在数据库遇到故障的时候也不会丢失提交事务的操作。

## 事务的使用

- 开始事务
 
	start transaction

- 事务回滚

	rollback

回滚事务是当遇到突发情况的时候，撤销执行的sql语句

- 事务提交

    commit

事务的提交是当所有语句执行完毕后，没有发生异常，提交事务，更新到数据库当中。

这里的理解是：一旦开始事务，就只有两个结果：提交和回滚，MySQL默认的权限级别是`REPEATABLE_READ`，脏读不会发生，所以可以看作没有提交，就不会把对数据库数据的改变反馈给数据库，数据库的数据不发生改变。

而回滚本身只是发生在没有提交之前，如果已经进行了提交的操作，就不能再进行回滚的操作了。

还有一点就是一次原子操作只对应一个事务，事务得到结果以后(rollback/commit)，要再次使用必须start transaction。

## 事务隔离引发的问题

1.脏读

简单来说，就是一个事务访问了另一个未提交事务的数据，造成的结果是，两个事务访问数据的结果不一致。

就好比，我去银行存钱了，我账号原本有一千元，我又存了一千元，但这个时候我存的这一千元还没有来得及提交，你偷偷查看我的账户余额发现此时有两千元钱，然后我又不想存了，界面上按了个取消存钱，你在看发现我的钱又变成了一千元，在我存钱的过程中（一个事务的经过），你访问我的数据得到了两种不同的结果，这就是脏读。

2.不可重复读

其实我不大认为不可重复读在事务数量较小的情况下会发生怎样大的冲突，造成它本身的原因是并发的同时性，因为我每次读的的确是已经得到提交后的数据。

但是它也会造成一些影响，举个例子：

我去消费了，刷了一次卡，发现卡里剩余余额为10000元，与此同时我的老婆在网上银行对我的账户直接把10000元全部转出，这个过程发生在我第二次刷卡的间隔，然后我刷卡打算买下这个3000元的鳄鱼皮包，滴的一声，pos机显示我当前账户余额为0元。。。

？？？

你会不会抓狂？因为你并不会想到两次刷卡的一秒间隔中钱已经被另一个事务进行了操作。

3.幻读（虚度）

例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。

为了解决上述产生的三种问题，MySQL提供了四种隔离级别：

1.Serializable(串行化)：可避免脏读、不可重复读、幻读的发生。

2.Repeatable read (可重复读)：可避免脏读、不可重复读的发生。

3.Read committed (读已提交)：可避免脏读的发生。

4.Read uncommitted (读未提交)：最低级别，任何情况都无法保证。

阶别从1-4依次降低，然后MySQL默认的权限级别是Repeatable read，因为Serializable本身对于资源占用很大，浪费数据库的性能，所以实际开发中很少使用Serializable设置权限。