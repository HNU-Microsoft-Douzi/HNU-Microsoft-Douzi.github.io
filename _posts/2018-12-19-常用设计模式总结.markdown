---
layout: post
title: "常用设计模式总结"
subtitle: "Summary of common design patterns"
data: 2018-12-19
author: "Zxy"
tags:
    - 设计模式
---

> 版权声明：转载必须注明出处。

## 常用设计模式类型

- 简单工厂模式
- 工厂模式
- 抽象工厂模式
- 单例模式
- 装饰模式
- 原型模式
- 职责链模式
- 观察者模式
- 状态模式
- 适配器模式
- 代理模式
- 策略模式
- 模板方法模式
- 外观模式
- 建造者模式
- 备忘录模式
- 组合模式
- 迭代器模式
- 桥接模式
- 命令模式
- 中介者模式
- 享元模式
- 解释器模式
- 访问者模式

### 简单工厂模式

UML类图:

简单工厂模式的理解:

### 工厂模式

UML类图:

工厂模式的理解:

### 抽象工厂模式

UML类图:

抽象工厂模式的理解:

### 单例模式

UML类图:

单例模式的理解:

### 装饰模式

UML类图:

装饰模式的理解:

### 原型模式

UML类图:

原型模式的理解:

### 职责链模式

UML类图:

职责链模式的理解:

### 观察者模式

UML类图:

![](http://enjoycodes.com/Content/third-party/UEditor/net/uploads/2015-12-08/6358512970076242014309908.png)

观察者模式的理解:

**定义：定义对象间的一种一对多的依赖关系，当一个对象的状态发生变化时，所有依赖于它的对象都得到通知并被自动更新。**

关于观察者模式的话，它是android底层架构中最被广泛应用的设计模式，为什么这样说呢？就好比四大组件中的Activity和Service甚至是Broadcase Receiver又或者是整个应用程序的Application都存在着自己的生命周期，你认为它们的生命周期是如何在相应的情况下获得调用的呢？

我没有去看framework层的源码，所以我个人认为是回调，回调本质上是观察者模式的简单实现，甚至上我可以说，回调机制本身就是观察者模式。

另一方面，我认为观察者模式被称之为通知者模式或许会更好一些。

为什么我会将它称之为通知者模式呢？因为观察者和被观察者之间的关联，就在于观察者通知被观察者让被观察者产生相应的变化，这个过程可以称为通知的过程。

实现方面比较简单，详见UML类图看该机制的实现抽象。

### 状态模式

UML类图:

状态模式的理解:

### 适配器模式

UML类图:

适配器模式的理解:

### 代理模式

UML类图:

代理模式的理解:

### 策略模式

UML类图:

策略模式的理解:

### 模板方法模式

UML类图:

模板方法模式的理解:

### 外观模式

UML类图:

外观模式的理解:

### 建造者模式

UML类图:

建造者模式的理解:

### 备忘录模式

UML类图:

备忘录模式的理解:

### 组合模式

UML类图:

组合模式的理解:

### 迭代器模式

UML类图:

迭代器模式的理解:

### 桥接模式

UML类图:

桥接模式的理解:

### 命令模式

UML类图:

命令模式的理解:

### 中介者模式

UML类图:

中介者模式的理解:

### 享元模式

UML类图:

享元模式的理解:

### 解释器模式

UML类图:

解释器模式的理解:

### 访问者模式

UML类图:

访问者模式的理解: