---
title: "计算机网络之拥塞控制"
subtitle: "Computer network congestion control"
layout: post
data: 2019-05-01
author: "Zxy"
tags:
    - java
---

4.30日众方项目初步完成，交由leader验收，抽出来一点间隙把拥塞窗口这边总结一下，结合下个周的小班课，会重点讲解一下Vegas和Veno这两个拥塞控制算法。

## 前期准备

**拥塞窗口：**

拥塞窗口是TCP拥塞控制中的一个概念，指某一段数据流在一个RTT内可以发送的数据包的个数。

发送端根据网络的拥塞程度所预设的一个大小值，这个值就是拥塞窗口。

**拥塞控制和流量控制的差别**

在今天讲述拥塞控制算法之前，我一直都想把对拥塞控制和流量控制的差别做一个很好的区分，因为从实际经验来看，对于初学者很难把这两者做一个明显的划分。

先用一句话来做一个概括：

流量控制针对的是端到端的问关注点，而拥塞控制针对的是整个网络内的情况。

就通常而言，流量控制一直针对的都是发送方和接收方速度不匹配的问题，提供一种速度匹配的方法来遏制发送方的发送速率让它不要发那么快，常用的方法由Stop-and-wait和滑动窗口，所以可以看到流量控制是由接收方控制的，发送方是被迫调整到与接收方同步。

流量控制仅仅是考虑了两端发送速率之间的问题，它不会去管中间流量传输时的情况，这就是为什么说拥塞控制是全局的，流量控制的关注点在传输层的双端，但是实际情况是分组会下发到下方的网络层传输层到物理层，所以路由本身是会对传输情况造成影响的，这个时候，发送方的速率不能单单根据接收方的反馈来进行调整（这是流量控制的做法），发送方必须依旧考虑整个网络的条件进行调整（针对全局的拥塞控制算法）。

## 浅谈拥塞控制

TCP是通过维护一个拥塞窗口来进行拥塞控制的，拥塞控制的原则是参照当前网络内部的拥塞程度，拥塞程度越大，说明在一个RTT内发送的分组应该越少，那么拥塞窗口的大小就应该减少，反之，当检测到网络内的拥塞程度逐渐增大的时候，说明此时我们应该针对网络情况增大拥塞窗口的程度。

**TCP拥塞控制算法发展过程中的思路：**

- 基于丢包的拥塞控制：将丢包视为出现拥塞，采用缓慢探测的方式，逐渐增大拥塞窗口，当出现丢包时，将拥塞窗口减小，如`Reno`、`Cubic`等。
- 基于时延的拥塞控制：将时延增加视为出现拥塞，延时增加时增大拥塞窗口，延时减小时，减小拥塞窗口，如`Vegas`、`FastTCP`等。
- 基于链路容量的拥塞控制：实时测量网络带宽和时延，认为网络上报文总量大于带宽时延乘积时出现了拥塞，如`BBR`。
- 基于学习的拥塞控制：没有特定的拥塞信号，而是借助评价函数，基于训练数据，使用机器学习的方法形成的一个控制策略，如`Remy`。

> 该段是引自如下:[https://www.cnblogs.com/lolau/p/9188476.html](https://www.cnblogs.com/lolau/p/9188476.html "https://www.cnblogs.com/lolau/p/9188476.html")

**几种拥塞控制的方法**
- 慢开始
- 拥塞避免
- 快重传
- 快恢复

**拥塞控制的代价**

实施拥塞控制是可以降低网络内通信流量的，所以拥塞控制本身是具备一定代价的，进行拥塞控制，必须要获得网络内部流量分布的信息。在实施拥塞控制之前，还需要在结点之间交换信息和各种命令，以便选择控制的策略和实施控制。这样就产生了额外的开销。拥塞控制还需要将一些资源分配给各个用户单独使用，使得网络资源不能更好地实现共享。

## 详细讲述几种拥塞控制算法

### 慢开始

### 拥塞避免

### 快重传

### 快恢复

## Vegas算法

Vegas将时延RTT的增加作为网络出现拥塞的信号，RTT增加，拥塞窗口减小，RTT减小，拥塞窗口增加。具体来说，Vegas通过比较实际吞吐量和期望吞吐量来调节拥塞窗口的大小。

期望吞吐量:Expected = cwnd / BaseRtt

实际吞吐量：Actual = cwnd / RTT

diff = (Excepted - Actual) * BaseRTT

参数解释：

- BaseRTT:所有观测来回响应时间的最小值，一般是建立连接后所发的第一个数据包的RTT
- cwnd:目前的拥塞窗口的大小


Vegas定义了两个阈值a,b，当diff > b时，拥塞窗口减小，当a <= diff <= b时，拥塞窗口不变，当diff < a时，拥塞窗口增加。

Vegas算法采用RTT的改变来判断网络的可用带宽，能精确地测量网络的可用带宽，效率比较好。但是，网络中Vegas与其它算法共存的情况下，基于丢包的拥塞控制算法会尝试填满网络中的缓冲区，导致Vegas计算的RTT增大，进而降低拥塞窗口，使得传输速度越来越慢，因此Vegas未能在Internet上普遍采用。

Vegas的适用场景：

适用于网络中只存在Vegas一种拥塞控制算法，竞争公平的情况下。

> 该段是引自如下:[https://www.cnblogs.com/lolau/p/9188476.html](https://www.cnblogs.com/lolau/p/9188476.html "https://www.cnblogs.com/lolau/p/9188476.html")

## Veno算法